require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe MembershipsController do

  # This should return the minimal set of attributes required to create a valid
  # Membership. As you add validations to Membership, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "user_id" => "2", "organization_id" => "3", "permission_set_id" => "5" } }
  let(:org_id) { 1 }
  let(:submitted_params) { { :organization_id => :org_id, 
                            :membership => { "user_id" => "2", "organization_id" => "3"}, 
                            :permission_set => { "create__memberships" => "true", "create__organizations" => "true" } } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MembershipsController. Be sure to keep this updated too.
  let(:valid_session) { {:previous_url => request.referer} }

  before :each do 
    @referer = "back_where_we_came_from"
    request.env["HTTP_REFERER"] = @referer
  end
  
  context "user NOT logged in" do

    describe "GET show" do
      it "redirects to the home page" do
        membership = Membership.create! valid_attributes
        get :show, {:organization_id => :org_id, :id => membership.to_param}, valid_session
        response.should redirect_to(new_user_session_path)
      end
    end

    describe "GET new" do
      it "redirects to the home page" do
        get :new, {:organization_id => :org_id}, valid_session
        response.should redirect_to(new_user_session_path)
      end
    end

    describe "GET edit" do
      it "redirects to the home page" do
        membership = Membership.create! valid_attributes
        get :edit, {:organization_id => :org_id, :id => membership.to_param}, valid_session
        response.should redirect_to(new_user_session_path)
      end
    end

    describe "POST create" do
      it "does NOT create" do
        expect {
            post :create, submitted_params, valid_session
          }.to_not change(Membership, :count).by(1)
      end

      it "redirects to the home page" do
        post :create, submitted_params, valid_session
        response.should redirect_to(new_user_session_path)
      end
    end

    describe "PUT update" do
      it "does NOT update" do
        membership = Membership.create! valid_attributes
        put :update, {:organization_id => :org_id, :id => membership.to_param}.merge(submitted_params), valid_session
        Membership.any_instance.should_not_receive(:update)
      end

      it "redirects to the home page" do
        membership = Membership.create! valid_attributes
        put :update, {:organization_id => :org_id, :id => membership.to_param}.merge(submitted_params), valid_session
        response.should redirect_to(new_user_session_path)
      end
    end

    describe "DELETE destroy" do
      it "does NOT delete" do
        membership = Membership.create! valid_attributes
        delete :destroy, {:organization_id => :org_id, :id => membership.to_param}, valid_session
        expect(Membership.count).to eq 1
      end

      it "redirects to the home page" do
        membership = Membership.create! valid_attributes
        delete :destroy, {:organization_id => :org_id, :id => membership.to_param}, valid_session
        response.should redirect_to(new_user_session_path)
      end
    end
  end


  context "user logged in" do

    before :each do
      @request.env["devise.mapping"]= Devise.mappings[:user]
      @user = FactoryGirl.create(:user)
      sign_in @user
    end

    describe "GET show" do
      it "assigns the right membership as @membership" do
        membership = Membership.create! valid_attributes
        get :show, {:organization_id => :org_id, :id => membership.to_param}, valid_session
        assigns(:membership).should eq(membership)
      end
    end

    describe "GET new" do
      it "assigns @membership and @permission_set" do
        get :new, {:organization_id => :org_id}, valid_session
        assigns(:membership).should be_a_new(Membership)
        assigns(:permission_set).should be_a_new(PermissionSet)
      end
    end

    describe "GET edit" do
      it "assigns the requested membership as @membership" do
        membership = Membership.create! valid_attributes
        get :edit, {:organization_id => :org_id, :id => membership.to_param}, valid_session
        assigns(:membership).should eq(membership)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Membership" do
          expect {
            post :create, submitted_params, valid_session
          }.to change(Membership, :count).by(1)
        end

        it "assigns a newly created membership as @membership" do
          post :create, submitted_params, valid_session
          assigns(:membership).should be_a(Membership)
          assigns(:membership).should be_persisted
        end

        it "redirects to the page before the new page" do
          # referral tested in feature specs
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved membership as @membership" do
          # Trigger the behavior that occurs when invalid params are submitted
          Membership.any_instance.stub(:save).and_return(false)
          post :create, {:organization_id => :org_id, :membership => { "user_id" => "invalid value" }}, valid_session
          assigns(:membership).should be_a_new(Membership)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          Membership.any_instance.stub(:save).and_return(false)
          post :create, {:organization_id => :org_id, :membership => { "user_id" => "invalid value" }}, valid_session
          response.should render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested membership" do
          membership = Membership.create! valid_attributes
          # Assuming there are no other memberships in the database, this
          # specifies that the Membership created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          Membership.any_instance.should_receive(:update)
          put :update, {:id => membership.to_param}.merge(submitted_params), valid_session
        end

        it "assigns the requested membership as @membership" do
          membership = Membership.create! valid_attributes
          put :update, {:id => membership.to_param}.merge(submitted_params), valid_session
          assigns(:membership).should eq(membership)
        end

        it "redirects to the page before the new page" do
          # referral tested in feature specs
        end
      end

      describe "with invalid params" do
        it "assigns the membership as @membership" do
          membership = Membership.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          Membership.any_instance.stub(:save).and_return(false)
          put :update, {:organization_id => :org_id, :id => membership.to_param, :membership => { "user_id" => "invalid value" }}, valid_session
          assigns(:membership).should eq(membership)
        end

        it "re-renders the 'edit' template" do
          membership = Membership.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          Membership.any_instance.stub(:save).and_return(false)
          put :update, {:organization_id => :org_id, :id => membership.to_param, :membership => { "user_id" => "invalid value" }}, valid_session
          response.should render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do

      it "destroys the requested membership" do
        membership = Membership.create! valid_attributes
        expect {
          delete :destroy, {:organization_id => :org_id, :id => membership.to_param}, valid_session
        }.to change(Membership, :count).by(-1)
      end

      it "redirects to the previous page" do
        membership = Membership.create! valid_attributes
        delete :destroy, {:organization_id => :org_id, :id => membership.to_param}, valid_session
        response.should redirect_to @referer
      end
    end
  end
end
