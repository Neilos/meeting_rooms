require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe CustomAttributesController do

  # This should return the minimal set of attributes required to create a valid
  # CustomAttribute. As you add validations to CustomAttribute, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {  name: "MyString",
                              value: "value",
                              room_id: 3 } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # OrganizationsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  context "user NOT logged in" do

    describe "DELETE destroy" do

      it "does NOT delete" do
        custom_attribute = CustomAttribute.create! valid_attributes
        delete :destroy, {:id => custom_attribute.to_param, :room_id => valid_attributes[:room_id]}, valid_session
        expect(CustomAttribute.count).to eq 1
      end

      it "redirects to the home page" do
        custom_attribute = CustomAttribute.create! valid_attributes
        delete :destroy, {:id => custom_attribute.to_param, :room_id => valid_attributes[:room_id]}, valid_session
        response.should redirect_to(new_user_session_path)
      end

    end

  end


  context "user logged in" do

    before :each do
      @request.env["devise.mapping"]= Devise.mappings[:user]
      @user = FactoryGirl.create(:user)
      sign_in @user
    end

    describe "DELETE destroy" do

      it "destroys the requested custom_attribute" do
        custom_attribute = CustomAttribute.create! valid_attributes
        expect {
          delete :destroy, {:id => custom_attribute.to_param, :room_id => valid_attributes[:room_id]}, valid_session
        }.to change(CustomAttribute, :count).by(-1)
      end

    end

  end

end
